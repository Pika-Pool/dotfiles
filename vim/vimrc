" use 24-bit(true-color) mode
if(empty($TMUX))
	if(has("nvim"))
		" For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
		let $NVIM_TUI_ENABLE_TRUE_COLOR=1
	endif

	" For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
	if(has("termguicolors"))
		set termguicolors
	endif
endif

" packages 
packadd! onedark.vim

" onedark.vim settings
let g:onedark_hide_endofbuffer=0
let g:onedark_terminal_italics=1

" Enabling filetype support provides filetype-specific indenting,
" synatx highligting, omni-completion and other useful settings
filetype plugin indent on
syntax on
colorscheme onedark

" 'matchit.vim' is built-in
" Hit '%' on 'if' to jump to 'else'
runtime macros/matchit.vim

" various settings
set visualbell									" disables sound on error
set number											" line numbers
set autoindent									" Minimal automatic indenting for any filetype
set backspace=indent,eol,start	" Proper backspace behaviour
set hidden											" Possibility to have more than one unsaved buffers
set incsearch										" Incremental search, hi '\<CR>' to stop
set ruler												" Shows the current line number at the bottom-right
set wildmenu										" Great command-line completion, use `<Tab>` to move around and `\<CR>` to validate
set scrolloff=10								" 'virtual' lines after EOF 
set nocompatible
set showtabline=2								" see tab bar even if single file is open

hi clear CursorLine
hi CursorLine cterm=bold
set cursorline									" highlight line number of cursor, without highlighting the whole line


"""""""""""""""
" Cursor line "
"""""""""""""""
augroup CL
	autocmd! ColorScheme * hi clear CursorLine
	autocmd! ColorScheme * hi CursorLineNR cterm=bold
augroup END

""""""""""""""""""
" Preview window "
"""""""""""""""""'
augroup completion_preview_close
	autocmd!
	autocmd CompleteDone * if !&previewwindow && &completeopt =~ 'preview' | silent! pclose | endif
augroup END

"""""""""""""""""""""""
"      Mappings       "
"""""""""""""""""""""'"
let mapleader="," 							" value of <Leader>

" vim quickfix settings
" :h quickfix
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <Leader>a :cclose<CR>

" vim tabs
" open new empty tab
inoremap <Leader>t <Esc>:tabnew 
nnoremap <Leader>t :tabnew 
" Go to tab by number
noremap <Leader>0 gt
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt
" Go to last active tab
autocmd TabLeave * let g:lasttab=tabpagenr()
nnoremap <silent> <C-l> :exe "tabn ".g:lasttab<CR>
vnoremap <silent> <C-l> :exe "tabn ".g:lasttab<CR>


"""""""""""""""""""""""
"     Plugins         "
"""""""""""""""""""""""

" vim-go plugin settings
augroup go
	autocmd!

	" run :GoBuild or :GoTestCompile based on the go file
	autocmd FileType go nmap <Leader>b :<C-u>call <SID>build_go_files()<CR>

	" :GoRun
	autocmd FileType go nmap <Leader>r <Plug>(go-run)

	" :GoTest => <Leader>t clashes with newtab mapping
	" autocmd FileType go nmap <Leader>t <Plug>(go-test)
	
augroup END

" build_go_files is a custom functino that builds or compiles go files/test files
" It calls :GoBuild if its a Go file, or :GoTestCompile if its a test file
function s:build_go_files()
	let l:file = expand('%')

	if l:file =~# '^\f\+_test\.go$'
		call go#test#Test(0,1)
	elseif l:file =~# '^\f\+\.go$'
		call go#cmd#Build(0)
	endif
endfunction
